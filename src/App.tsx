import { TransformWrapper, TransformComponent } from 'react-zoom-pan-pinch'

/*
 *   <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no" />
 *   –í–ê–ñ–ù–û: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –º–µ—Ç–∞-—Ç–µ–≥ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à public/index.html,
 *   —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö.
 */

// --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ---
const TOTAL_NODES = 30
const NODE_VERTICAL_SPACING = 130 // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –º–µ–∂–¥—É —É–∑–ª–∞–º–∏
const NODE_START_TOP = 150 // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è —Å–∞–º–æ–≥–æ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É–∑–ª–∞
const CONTENT_HEIGHT = NODE_START_TOP + TOTAL_NODES * NODE_VERTICAL_SPACING // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é –≤—ã—Å–æ—Ç—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞

// --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–∑–ª–æ–≤ ---
const nodesData = Array.from({ length: TOTAL_NODES }, (_, i) => {
	const id = i + 1
	const top = NODE_START_TOP + i * NODE_VERTICAL_SPACING
	const left =
		id % 2 !== 0
			? 'calc(50% - 100px)' // –ù–µ—á–µ—Ç–Ω—ã–µ —Å–ª–µ–≤–∞
			: 'calc(50% + 50px)' // –ß–µ—Ç–Ω—ã–µ —Å–ø—Ä–∞–≤–∞

	return { id, top, left }
})

// --- –°—Ç–∏–ª–∏ ---
const styles = {
	appContainer: {
		backgroundColor: '#222',
		color: 'white',
		width: '100vw',
		height: '100vh',
		overflow: 'hidden',
		position: 'relative',
		fontFamily: 'sans-serif',
	},
	header: {
		position: 'fixed',
		top: 0,
		left: 0,
		width: '100%',
		padding: '20px',
		boxSizing: 'border-box',
		zIndex: 10,
		background: '#212121',
	},
	backArrow: {
		fontSize: '30px',
		cursor: 'pointer',
	},
	footer: {
		position: 'fixed',
		bottom: 0,
		left: 0,
		width: '100%',
		padding: '20px 25px',
		display: 'flex',
		justifyContent: 'space-between',
		alignItems: 'center',
		boxSizing: 'border-box',
		zIndex: 10,
		background: '#212121',
	},
	footerIcon: {
		fontSize: '28px',
		cursor: 'pointer',
	},
	joinButton: {
		padding: '15px 45px',
		backgroundColor: '#e0e0e0',
		color: '#000',
		border: 'none',
		borderRadius: '30px',
		fontSize: '16px',
		fontWeight: 500,
		cursor: 'pointer',
	},
	canvasWrapper: {
		width: '100%',
		height: '100vh',
	},
	contentWrapper: {
		position: 'relative',
		width: '100%',
		// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –≤—ã—á–∏—Å–ª—è–µ–º –≤—ã—Å–æ—Ç—É
		height: `${CONTENT_HEIGHT}px`,
	},
	node: {
		width: '90px',
		height: '90px',
		backgroundColor: '#555',
		border: '2px solid white',
		borderRadius: '50%',
		position: 'absolute',
		display: 'flex',
		justifyContent: 'center',
		alignItems: 'center',
		fontSize: '24px',
		fontWeight: 'bold',
		zIndex: 5,
	},
	nodeLabel: {
		position: 'absolute',
		transform: 'translateX(-40px)',
		fontSize: '20px',
		color: '#aaa',
	},
	// –°—Ç–∏–ª–∏ –¥–ª—è —Å–æ–µ–¥–∏–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π
	line: {
		position: 'absolute',
		width: '155px',
		height: '2px',
		background: 'white',
		zIndex: 1,
		// –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ª–∏–Ω–∏—é –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –µ–µ –ª–µ–≤–æ–π —Ç–æ—á–∫–∏
		left: 'calc(50% - 45px)',
	},
} as const

function App() {
	return (
		<div style={styles.appContainer}>
			<header style={styles.header}>
				<span style={styles.backArrow}>‚Üê</span>
			</header>

			<TransformWrapper
				limitToBounds={true}
				minScale={0.05} // –£–º–µ–Ω—å—à–∏–ª –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑—É–º, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –≤—Å—é –∫–∞—Ä—Ç—É
				maxScale={3}
				initialScale={0.8} // –ù–∞—á–∞–ª—å–Ω—ã–π –º–∞—Å—à—Ç–∞–±, —á—Ç–æ–±—ã –±–æ–ª—å—à–µ –≤–ª–µ–∑–∞–ª–æ
				initialPositionY={0}
				panning={{
					disabled: false,
					velocityDisabled: false,
				}}
				doubleClick={{ disabled: true }}
				wheel={{ step: 0.1 }}
			>
				<TransformComponent
					wrapperStyle={styles.canvasWrapper}
					contentStyle={styles.contentWrapper}
				>
					{/* –†–µ–Ω–¥–µ—Ä–∏–º –≤—Å–µ —É–∑–ª—ã */}
					{nodesData.map(node => (
						<div
							key={node.id}
							style={{
								...styles.node,
								top: `${node.top}px`,
								left: node.left,
							}}
						>
							<span
								style={{
									...styles.nodeLabel,
									left: node.id % 2 === 0 ? '120px' : '-50px',
								}}
							>
								{node.id}
							</span>
						</div>
					))}

					{/* –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –†–ï–ù–î–ï–†–ò–ú –í–°–ï –õ–ò–ù–ò–ò */}
					{nodesData.slice(0, -1).map((node, index) => {
						const nextNode = nodesData[index + 1]
						// –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ª–∏–Ω–∏–∏ —Ä–æ–≤–Ω–æ –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ –º–µ–∂–¥—É –¥–≤—É–º—è —É–∑–ª–∞–º–∏
						const lineTop = (node.top + nextNode.top) / 2
						// –ß–µ—Ä–µ–¥—É–µ–º —É–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞
						const rotation = index % 2 === 0 ? 35 : -35

						return (
							<div
								key={`line-${node.id}`}
								style={{
									...styles.line,
									top: `${lineTop}px`,
									transform: `rotate(${rotation}deg)`,
								}}
							/>
						)
					})}
				</TransformComponent>
			</TransformWrapper>

			<footer style={styles.footer}>
				<span style={styles.footerIcon}>üë•</span>
				<button style={styles.joinButton}>–í—Å—Ç—É–ø–∏—Ç—å</button>
				<span style={styles.footerIcon}>üîî</span>
			</footer>
		</div>
	)
}

export default App
